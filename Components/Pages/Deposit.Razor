@page "/deposit"
<PageTitle>Ledger Deposit</PageTitle>

@inject SelfHelpLedger.Data.AppDbContext DbContext
@using SelfHelpLedger.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<h3 class="bg-success text-white rounded p-1 text-sm">Deposit Money</h3>

<EditForm Model="@depositModel" OnValidSubmit="HandleDeposit" FormName="DepositForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="member" class="text-success">Member:</label>
        <select id="member" class="form-control" @bind="depositModel.MemberId">
            <option value="" >-- Select Member --</option>
            @foreach (var m in members)
            {
                <option value="@m.Id">@m.Name (@m.Balance)</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="amount" class="text-success">Deposit Amount (Ksh):</label>
        <InputNumber TValue="decimal" id="amount" class="form-control" @bind-Value="depositModel.Amount" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Submit Deposit</button>
</EditForm>

@if (!string.IsNullOrEmpty(depositMessage))
{
    <p class="alert alert-success mt-3">@depositMessage</p>
}

@code {
    private List<Member> members = new();
    private DepositModel depositModel = new();
    private string depositMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        members = await DbContext.Members.ToListAsync();
    }

    private async Task HandleDeposit()
    {
        var member = await DbContext.Members.FindAsync(depositModel.MemberId);
        if (member != null)
        {
            member.Balance += depositModel.Amount;

            var transaction = new Transaction
            {
                MemberId = member.Id,
                Amount = depositModel.Amount,
                Type = "Deposit",
                Date = DateTime.UtcNow,
                TransactionNumber = GenerateTransactionNumber()
            };

            DbContext.Transactions.Add(transaction);
            await DbContext.SaveChangesAsync();

            depositMessage = $"Deposit successful for {member.Name}!";
            depositModel = new DepositModel();
            members = await DbContext.Members.ToListAsync();
            StateHasChanged();
        }
    }

    private string GenerateTransactionNumber()
    {
        return Guid.NewGuid().ToString("N").Substring(0, 12).ToUpper();
    }

    public class DepositModel
    {
        public int MemberId { get; set; }
        public decimal Amount { get; set; }
    }
}
